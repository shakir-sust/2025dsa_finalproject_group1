---
title: "Data Science Applied to Ag - Final Project - ML"
format:
  html:
    embed-resources: true
    toc: true
    theme: cerulean
author: Md Shakir Moazzem, Umar Munir
---

# Introduction  

This script contains the data wrangling and feature engineering steps for the final project.

# Start of data wrangling

## Loading packages  

The following code chunk will load necessary packages.

```{r Setup, message=F}

# Installing packages

#install.packages("tidyverse")
#install.packages("readxl")
#install.packages("janitor")
#install.packages("dplyr")
#install.packages("tidyr")
#install.packages("readr")
#install.packages("lubridata")
#install.packages("stringr")

# Loading packages 

library(tidyverse)
library(readxl) # to read excel files
library(janitor) # to clean data; helps fix and standardize the column names
library(dplyr) # wrangling
library(tidyr) # wrangling
library(readr) # to export csv
library(lubridate)
library(stringr)

```

## Reading "training" data  

The following code chunk will read the csv files for the 3 training data sets

```{r training data import, message=F, warning=F}

#reading the csv files for the 3 training data sets 

trait_df <- read_csv("../data/training/training_trait.csv") 
meta_df  <- read_csv("../data/training/training_meta.csv")
soil_df  <- read_csv("../data/training/training_soil.csv")

submission_test <- read_csv("../data/testing/testing_submission.csv")
soil_test <- read_csv("../data/testing/testing_soil.csv")
meta_test <- read_csv("../data/testing/testing_meta.csv")


```


## Data wrangling on "training" data

The code below creates a function to adjust the yield_mg_ha for 15.5% grain moisture.

```{r}

# Function to transform yield to 15.5% moisture
adjust_yield <- function(yield_mg_ha, grain_moisture) {
  yield_mg_ha * (100 - grain_moisture) / (100 - 15.5)
}

```


The code below conducts data wrangling on "trait_df"

```{r clean_and_summarize_trait, message=F, warning=F}

trait_clean <- trait_df %>%
  select(-block) %>%
  mutate(
    site = str_remove_all(site, "[a-z]"), # removing all lowercase letters from site
    site = str_replace(site, "-.*$", ""), # keeping only text before any dash
    site = str_replace(site, "_.*$", "") # keeping only text before any underscore
  ) %>%
  group_by(year, site, hybrid) %>%
  summarize(
    yield_mg_ha    = mean(yield_mg_ha, na.rm = TRUE),
    grain_moisture = mean(grain_moisture, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    adjusted_yield = adjust_yield(yield_mg_ha, grain_moisture),
  ) %>%
  select(-yield_mg_ha, -grain_moisture) %>%
  ungroup()


trait_clean

```

The following code chunks will conduct data wrangling on "trait_clean"

```{r}

submission_test_clean <- submission_test %>%
  mutate(
    site = str_remove_all(site, "[a-z]"), # removing all lowercase letters from site
    site = str_replace(site, "-.*$", ""), # keeping only text before any dash
    site = str_replace(site, "_.*$", "") # keeping only text before any underscore
  ) %>%
  group_by(year, site, hybrid) %>%
  select(-yield_mg_ha) %>%
  ungroup()

submission_test_clean

```


The following code chunks will conduct data wrangling on  "training_soil.csv"


```{r data_wrangling_training_soil, message=F, warning=F}

soil_clean <- soil_df %>%
  mutate(
    # 1) remove all lowercase letters
    site = str_remove_all(site, "[a-z]"),
    # 2) keep only text before any dash
    site = str_replace(site, "-.*$", ""),
    # 3) keep only text before any underscore
    site = str_replace(site, "_.*$", "")
  ) %>%
  ungroup()

soil_clean
```

The following code chunks will conduct data wrangling on  "soil_test_clean"

```{r}

soil_test_clean <- soil_test %>%
  mutate(
    # 1) remove all lowercase letters
    site = str_remove_all(site, "[a-z]"),
    # 2) keep only text before any dash
    site = str_replace(site, "-.*$", ""),
    # 3) keep only text before any underscore
    site = str_replace(site, "_.*$", "")
  ) %>%
  ungroup()

soil_test_clean

```

The following code chunks will conduct data wrangling on  "training_meta.csv".

```{r clean_meta_sites}

meta_clean <- meta_df %>%
  rename(
    lon = longitude,
    lat = latitude
  ) %>%
  mutate(
    # 1) remove all lowercase letters
    site = str_remove_all(site, "[a-z]"),
    # 2) keep only text before any dash
    site = str_replace(site, "-.*$", ""),
    # 3) keep only text before any underscore
    site = str_replace(site, "_.*$", "")
  ) %>%
  distinct(year, site, .keep_all = TRUE) %>%
  select(-previous_crop) %>%
  clean_names() %>%
  ungroup() 
  

meta_clean

```

The following code chunks will conduct data wrangling on "meta_test_clean"

```{r}

meta_test_clean <- meta_test %>%
  rename(
    lon = longitude,
    lat = latitude
  ) %>%
  mutate(
    # 1) remove all lowercase letters
    site = str_remove_all(site, "[a-z]"),
    # 2) keep only text before any dash
    site = str_replace(site, "-.*$", ""),
    # 3) keep only text before any underscore
    site = str_replace(site, "_.*$", "")
  ) %>%
  distinct(year, site, .keep_all = TRUE) %>%
  select(-previous_crop) %>%
  clean_names() %>%
  ungroup() 
  

meta_test_clean

```


## EDA for cleaned data

The following code chunk will conduct EDA for cleaned data.

```{r}
summary(trait_clean)

summary(soil_clean)

summary(meta_clean)

summary(submission_test_clean)

summary(soil_test_clean)

summary(meta_test_clean)

```


## Merging all 3 cleaned data frames for training data

The following code chunk will merge all 3 cleaned data frames for training data.

```{r}

merged_train <- trait_clean %>%
  left_join(soil_clean, by = c("year","site")) %>%
  left_join(meta_clean, by = c("year","site"))


merged_test <- submission_test_clean %>%
  left_join(soil_test_clean, by = c("year","site")) %>%
  left_join(meta_test_clean, by = c("year","site"))


merged_all <- bind_rows(merged_train, merged_test)

merged_all

```





























