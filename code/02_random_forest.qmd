---
title: "Data Science Applied to Ag - Final Project - ML"
format:
  html:
    embed-resources: true
    toc: true
    theme: cerulean
author: Md Shakir Moazzem, Umar Munir
---
# Introduction  

This script contains ML Workflow with random forest. 

# Setup  
## Install and Load relevant packages  

The following code chunk will load necessary packages.

```{r Setup, message=F, warning=F}

# Installing packages

#install.packages("tidyverse")
#install.packages("readxl")
#install.packages("janitor")
#install.packages("dplyr")
#install.packages("tidyr")
#install.packages("readr")
#install.packages("lubridata")
#install.packages("stringr")
#install.packages("ranger") 
#install.packages("vip")
#install.packages("ranger")
#install.packages("finetune")

# Loading packages 

library(readxl) 
library(janitor) 
library(dplyr) 
library(tidyr) 
library(readr) 
library(lubridate)
library(stringr)
library(tidymodels)
library(tidyverse) 
library(vip)
library(ranger)
library(finetune)

```
 
 
 ## Data import

The following code chunk will import the finali wrangled  data file i.e., "weather_monthsum.csv".

```{r import, message=F, warning=F}
# Going to do some wrangling on the go with the file
weather_rf <- read_csv("../data/weather_monthsum.csv") %>%
  rename(yield = adjusted_yield) 

weather_rf

#view(weather_rf)


```
 
 
# Machine Learning workflow  

## 1. Pre-processing  

```{r}
# Splitting data between known (2014-2023) and unknown (2024) containing  NA as yield values for future prediction
weather_to_predict <- weather_rf %>% filter(is.na(yield)) #prediction

weather_complete     <- weather_rf %>% filter(!is.na(yield))
```

## a. Data split  


```{r}
# Initial data split (70/30) on the known data (2014-2023)
set.seed(931735)
weather_split_rf <- initial_split(
  weather_complete,
  prop   = 0.7,
  strata = yield
)

```



The following code chunk will conduct setting train set.

```{r weather_train, message=F, warning=F}
# Setting train set 
weather_train_rf <- training(weather_split_rf)

weather_train_rf
```

The following code chunk will conduct setting test split.


```{r weather_test, message=F, warning=F}
# Setting test split
weather_test_rf <- testing(weather_split_rf)

weather_test_rf
```

 
 
### b. Distribution of target variable "yield"

The following code chunk will create a density plot to compare target variable "yield" in the training and test set.

```{r distribution, message=F, warning=F}
ggplot() +
  geom_density(data = weather_train_rf, 
               aes(x = yield),
               color = "red") +
  geom_density(data = weather_test_rf, 
               aes(x = yield),
               color = "blue") 
  
```


### c. Data processing with recipe

The following code chunk will conduct data processing with recipe.

```{r weather_recipe}
weather_recipe_rf <-
  # Defining predicted and predictor variables
  recipe(yield ~ .,
         data = weather_train_rf) %>%
  # Removing year, site, hybrid, and non-growing season  
    step_rm(year, 
            site, 
            hybrid,
            matches("Jan|Feb|Mar|Nov|Dec")) 
  
weather_recipe_rf
```


The following code chunk will prep the recipe to estimate any required statistics.

```{r weather_prep}

weather_prep_rf <- weather_recipe_rf %>%
  prep()

weather_prep_rf
```

 
## 2. Training

### a. Model specification

The following code chunk will conduct model specification.
  
```{r rf_spec}

rf_spec <- 
  # Specifying random forest as our model type, asking to tune the hyperparameters
  rand_forest(trees = tune(),
              mtry = tune() 
              ) %>%
    # Specify the engine (= package)
    set_engine("ranger") %>% #specifying "ranger" as the engine/package to run random forest 
    # Specifying mode  
    set_mode("regression") #random forest can handle both regression (when y is numerical) and classification (when y is categorical) #Here, we are specifying "set_mode("regression")" because our y variable is numerical [continuous]

rf_spec

```

```{r}
# 5. Bundle into a workflow
library(workflows)
rf_wf <- workflow() %>%
  add_recipe(weather_recipe_rf) %>%
  add_model(rf_spec)
```

 ###b. Hyperparameter tuning

The following code chunk will conduct 3-fold cross-validation to evaluate model performance during tuning.

```{r resampling_foldcv}
set.seed(34549)
resamples_rf <- vfold_cv(weather_train_rf, 
                              v = 3) #becuase of limited time and computing power

resamples_rf
resamples_rf$splits[[1]]
resamples_rf$splits[[2]]
```




```{r simulate annealing}
# Tuning with simulated annealing (3 because of limited time and computational power)
library(finetune)
set.seed(76544)
rf_tune_res <- tune_sim_anneal(
  rf_wf,
  resamples = resamples_rf,
  iter = 3,
  control = control_sim_anneal(save_workflow = FALSE)
)


beepr::beep() 
```


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
